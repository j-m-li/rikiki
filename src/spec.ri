//
// This software is dedicated to the public domain.
//


// There is no type checking. Every variable is threated equaly as an 
// integer, a pointer, a one dimension array of integer/pointer, a 
// pointer to a byte array or a function pointer.

include "std.ri"; // include an other source file

const MY_CONST 47; //define a constant

struct myst ( // a structure with four members
	one, 
	next,
	three,
	four
); 

test(); //Functions must be declared before calling them
t2(a,b); //everything after // is a comment till the end of line

startup(argc, argv) 
(		            // definition of the entry point function

	%i,a,s,b,end; //declaration of local variables
	%n;
	%f,y;
	a = array(123);   //allocate an array of 123 intergers
	s = struct(myst); //allocate a "myst" structure
	b = bytes(3);     //allocate 3 bytes of memory
	
	poke(b,0,'B');	  // put a B in the first byte of b memory
	poke(b,1,'\n');
	poke(b,2,0);
	print(b);

	f = t2;		 // function pointer
	f.(100,2,3,4,5); // indirect function call
	f = f.();

	n = 1 * 20 % 2 / 3 + (17 - 4); //that's all the operators that we have
	print2(n);

	s.myst.one = 10001; // to access a struct member we 
                            //put the name of the struct 
                            //then the member name

	s.myst.next = "two"; // string literal (nul terminated as in C)
	s.myst.three = 3;    // integer constant
	s.myst.four = '4';   // character constant (translated to integer)

	i = a[1];	     // array access

	a[0] = "yo";
	a[122] = "lAst";

	print("hello world\n");
	print2(peek(a[122], 1));  // print the integer value of the second byte
                                  // of the string pointer by the 123 cell of a
	print("\n");
	print(argv[argc-1]);
	print2(argv[argc-1]);

	i = 0;
	y = i;
	while (i == y && i != y && i < y && i <= y && i > y && i >= y) (
	);

	switch (argc > 2) (      // switch is used as a replacement of if/else
	+1:(	
		print("yo \n");
		i = 2;
		end = 0;
		while (i < argc && (end == 0 || 3 == 2)) ( // only while loop
			print(".");
			i = i + 1;
			switch (i) (
			+10: (
				end = 1;
			));
		);
	),
	0:-1:(
		print(s.myst.next);
	));
	free(a);
	test(); 	// function call
	free(s.myst);
	f = file_size(argv[1]);
	switch(f > 0) ( // a compare operation result is either +1, -1 or 0. 
	-5: 2: 3:       // these are garbage, but are allowed
	+1: (		// +1 is true
		f = file_load(argv[1], f);
		print(f);
	),
	-1: 0: (;)      // -1 or 0 are false
	);
	return 0;
)

test()
(
	print("test\n"); //print a string
	print2(MY_CONST); // print a number (print3 is for ternary encoded numbers)
	t2(1,2);
)

t2( a , b ) (
	print2(a+b);
	print("\n");
)
